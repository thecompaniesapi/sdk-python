#!/usr/bin/env python3
"""
Schema generation script for The Companies API Python SDK.
"""

import json
import os
import sys
import subprocess
from pathlib import Path
import requests


def fetch_openapi_schema() -> dict:
    """Fetch the OpenAPI schema from the API."""
    version = os.getenv('TCA_API_VERSION', 'v2')
    api_url = os.getenv('TCA_API_URL', 'https://api.thecompaniesapi.com')
    schema_url = f"{api_url}/{version}/openapi"
    
    print(f"Pulling schema from: {schema_url}")
    
    try:
        response = requests.get(schema_url, timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"Error fetching schema: {e}")
        sys.exit(1)


def extract_operations_map(schema: dict) -> dict:
    """Extract operations map from OpenAPI schema."""
    operations = {}
    
    paths = schema.get('paths', {})
    for path, path_operations in paths.items():
        for method, operation in path_operations.items():
            if method.lower() in ['get', 'post', 'put', 'patch', 'delete']:
                operation_id = operation.get('operationId')
                if operation_id:
                    # Extract path parameters
                    path_params = []
                    for param in operation.get('parameters', []):
                        if param.get('in') == 'path':
                            path_params.append(param.get('name'))
                    
                    operations[operation_id] = {
                        'path': path,
                        'method': method.lower(),
                        'pathParams': path_params
                    }
    
    return operations


def generate_pydantic_types(schema: dict, output_file: Path) -> None:
    """Generate Pydantic models from OpenAPI schema."""
    print(f"Generating Pydantic types...")
    
    # Save schema to temporary file
    temp_schema_file = output_file.parent / 'temp_schema.json'
    with open(temp_schema_file, 'w', encoding='utf-8') as f:
        json.dump(schema, f, indent=2)
    
    try:
        # Use command line interface which is more stable
        cmd = [
            'datamodel-codegen',
            '--input', str(temp_schema_file),
            '--input-file-type', 'openapi',
            '--output', str(output_file),
            '--output-model-type', 'pydantic_v2.BaseModel',
            '--target-python-version', '3.9',
            '--use-title-as-name',
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"Pydantic types written to: {output_file}")
        
    except subprocess.CalledProcessError as e:
        print(f"Error generating types: {e}")
        print(f"stdout: {e.stdout}")
        print(f"stderr: {e.stderr}")
        raise
    finally:
        # Clean up temporary file
        if temp_schema_file.exists():
            temp_schema_file.unlink()


def generate_operations_map_file(operations: dict, output_file: Path) -> None:
    """Generate operations map Python file."""
    content = f'''"""
Auto-generated operations map for The Companies API.
This file is generated by scripts/generate_schema.py - do not edit manually.
"""

from typing import Dict, List

# Operations map extracted from OpenAPI schema
operations_map = {json.dumps(operations, indent=4)}

# Type alias for operations map
OperationsMap = Dict[str, Dict[str, any]]
'''

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Operations map written to: {output_file}")


def update_generated_init(generated_dir: Path) -> None:
    """Update __init__.py in generated directory to export main types."""
    init_file = generated_dir / '__init__.py'
    
    content = '''"""
Generated types and operations for The Companies API.
"""

from .operations_map import operations_map, OperationsMap

try:
    # Import commonly used types - adjust as needed
    from .models import *
except ImportError:
    # Handle case where models haven't been generated yet
    pass

__all__ = ['operations_map', 'OperationsMap']
'''
    
    with open(init_file, 'w', encoding='utf-8') as f:
        f.write(content)


def main():
    """Main function to update schema and generate types."""
    # Get project root directory
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    generated_dir = project_root / 'src' / 'thecompaniesapi' / 'generated'
    
    # Create generated directory if it doesn't exist
    generated_dir.mkdir(exist_ok=True)
    
    # Fetch OpenAPI schema
    schema = fetch_openapi_schema()
    
    # Extract operations map
    operations = extract_operations_map(schema)
    print(f"Found {len(operations)} operations")
    
    # Generate Pydantic types
    types_file = generated_dir / 'models.py'
    generate_pydantic_types(schema, types_file)
    
    # Generate operations map
    operations_file = generated_dir / 'operations_map.py'
    generate_operations_map_file(operations, operations_file)
    
    # Update __init__.py
    update_generated_init(generated_dir)
    
    print("\n✨ Schema generation completed successfully!")
    print(f"   📁 Generated files in: {generated_dir}")
    print(f"   🔧 Operations: {len(operations)}")
    print("\n🚀 You can now use the generated types in your SDK!")


if __name__ == '__main__':
    main() 
