# generated by datamodel-codegen:
#   filename:  temp_schema.json
#   timestamp: 2025-07-23T01:03:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Attribute(Enum):
    about_businessType = 'about.businessType'
    about_industries = 'about.industries'
    about_industry = 'about.industry'
    about_name = 'about.name'
    about_totalEmployees = 'about.totalEmployees'
    about_yearFounded = 'about.yearFounded'
    ai_search = 'ai.search'
    analytics_monthlyVisitors = 'analytics.monthlyVisitors'
    apps = 'apps'
    codes_naics = 'codes.naics'
    codes_sic = 'codes.sic'
    contacts = 'contacts'
    domain_domain = 'domain.domain'
    domain_tld = 'domain.tld'
    finances_revenue = 'finances.revenue'
    finances_stockExchange = 'finances.stockExchange'
    locations_headquarters_city_code = 'locations.headquarters.city.code'
    locations_headquarters_continent_code = 'locations.headquarters.continent.code'
    locations_headquarters_country_code = 'locations.headquarters.country.code'
    locations_headquarters_county_code = 'locations.headquarters.county.code'
    locations_headquarters_state_code = 'locations.headquarters.state.code'
    meta_listIds = 'meta.listIds'
    meta_score = 'meta.score'
    meta_syncedAt = 'meta.syncedAt'
    socials = 'socials'
    socials_linkedin_id = 'socials.linkedin.id'
    technologies_active = 'technologies.active'
    technologies_categories = 'technologies.categories'
    urls = 'urls'


class Operator(Enum):
    and_ = 'and'
    or_ = 'or'


class Sign(Enum):
    equals = 'equals'
    exactEquals = 'exactEquals'
    greater = 'greater'
    lower = 'lower'
    notEquals = 'notEquals'


class SegmentationCondition(BaseModel):
    attribute: Attribute
    blockedOperator: Optional[bool] = None
    operator: Operator
    sign: Sign
    values: List[Union[str, float]]


class Team(BaseModel):
    admin: Optional[bool] = None
    country: Optional[str] = None
    createdAt: Optional[str] = None
    credits: float
    creditsPack: float
    id: float
    name: Optional[str] = None
    role: Optional[str] = None
    stripeCustomerId: Optional[str] = None
    stripeProductId: Optional[str] = None
    stripeSubscribed: bool
    stripeSubscriptionId: Optional[str] = None
    stripeSubscriptionStatus: Optional[str] = None
    websiteUrl: Optional[str] = None


class ColorMode(Enum):
    dark = 'dark'
    light = 'light'
    system = 'system'


class Role(Enum):
    owner = 'owner'
    user = 'user'


class User(BaseModel):
    colorMode: Optional[ColorMode] = None
    createdAt: Optional[str] = None
    currentTeamId: Optional[float] = None
    email: str
    emailFree: Optional[bool] = None
    emailVerified: Optional[bool] = None
    emailVerifiedResentAt: Optional[str] = None
    fullName: Optional[str] = None
    hasPassword: Optional[bool] = None
    id: float
    locale: Optional[Any] = None
    pictureUrl: Optional[str] = None
    referral: Optional[str] = None
    role: Optional[Role] = None


class Type(Enum):
    array_boolean = 'array|boolean'
    array_number = 'array|number'
    array_string = 'array|string'
    boolean = 'boolean'
    number = 'number'
    string = 'string'


class FieldModel(BaseModel):
    description: Optional[str] = None
    key: str
    type: Type
    values: Optional[List[str]] = None


class LLMAnswer(BaseModel):
    companyId: float
    explanation: Optional[str] = None
    fields: Optional[List[FieldModel]] = None
    grounded: Optional[bool] = None
    output: Dict[str, Any]
    question: str
    score: float


class Field1(BaseModel):
    description: Optional[str] = None
    key: str
    type: Type
    values: Optional[List[str]] = None


class Job(Enum):
    ask_domain = 'ask-domain'
    ask_list = 'ask-list'
    enrich_companies = 'enrich-companies'
    enrich_list = 'enrich-list'
    cleanup_list = 'cleanup-list'


class Model(Enum):
    claude = 'claude'
    claude_mini = 'claude-mini'
    cousteau = 'cousteau'
    gpt = 'gpt'
    gpt_mini = 'gpt-mini'
    groq = 'groq'
    groq_mini = 'groq-mini'
    llama3 = 'llama3'
    llama4 = 'llama4'
    nllb = 'nllb'
    nuextract = 'nuextract'
    phi3 = 'phi3'


class Data(BaseModel):
    cleanedUp: Optional[float] = None
    completed: Optional[List[str]] = None
    completedDomains: Optional[float] = None
    completedDomainsSample: Optional[List[str]] = None
    count: Optional[float] = None
    domains: Optional[List[str]] = None
    domainsSample: Optional[List[str]] = None
    elasticQuery: Optional[Any] = None
    failed: Optional[List[str]] = None
    failedDomains: Optional[float] = None
    failedDomainsSample: Optional[List[str]] = None
    fields: Optional[List[Field1]] = None
    grounded: Optional[bool] = None
    job: Optional[Job] = None
    model: Optional[Model] = None
    query: Optional[List[SegmentationCondition]] = None
    question: Optional[str] = None
    team: Optional[Team] = None
    totalDomains: Optional[float] = None
    user: Optional[User] = None


class Result(BaseModel):
    answers: Optional[List[LLMAnswer]] = None
    cleanedUp: Optional[float] = None
    domains: Optional[List[str]] = None


class Status(Enum):
    active = 'active'
    completed = 'completed'
    failed = 'failed'
    pending = 'pending'


class Type2(Enum):
    companies_added = 'companies:added'
    jobs_request = 'jobs:request'


class Action(BaseModel):
    attempts: Optional[float] = None
    cost: Optional[float] = None
    createdAt: Optional[str] = None
    data: Optional[Data] = None
    id: float
    listId: Optional[float] = None
    promptId: Optional[float] = None
    result: Optional[Result] = None
    status: Status
    teamId: Optional[float] = None
    type: Optional[Type2] = None
    updatedAt: Optional[str] = None


class PaginationMeta(BaseModel):
    cost: float
    credits: float
    currentPage: float
    firstPage: float
    freeRequest: bool
    lastPage: float
    maxScrollResultsReached: Optional[bool] = None
    perPage: float
    total: float


class BusinessType(Enum):
    educational_institution = 'educational-institution'
    government_agency = 'government-agency'
    nonprofit = 'nonprofit'
    partnership = 'partnership'
    privately_held = 'privately-held'
    public_company = 'public-company'
    self_employed = 'self-employed'
    sole_proprietorship = 'sole-proprietorship'


class TotalEmployees(Enum):
    field_1_10 = '1-10'
    field_10_50 = '10-50'
    field_50_200 = '50-200'
    field_200_500 = '200-500'
    field_500_1k = '500-1k'
    field_1k_5k = '1k-5k'
    field_5k_10k = '5k-10k'
    over_10k = 'over-10k'


class About(BaseModel):
    businessType: Optional[BusinessType] = Field(
        None, description='The type of business the company is.'
    )
    industries: Optional[List[str]] = Field(
        None, description='The industries the company is in.'
    )
    industry: Optional[str] = Field(
        None, description='The main industry of the company.'
    )
    languages: Optional[List[str]] = Field(
        None, description='The languages the company supports.'
    )
    name: Optional[str] = Field(None, description='The name of the company.')
    nameAlts: Optional[List[str]] = Field(
        None, description='The alternative names of the company.'
    )
    nameLegal: Optional[str] = Field(None, description='The legal name of the company.')
    totalEmployees: Optional[TotalEmployees] = Field(
        None, description='The total number of employees the company has.'
    )
    totalEmployeesExact: Optional[float] = Field(
        None, description='The exact total number of employees the company has.'
    )
    yearEnded: Optional[float] = Field(
        None, description='The year the company stopped its operations.'
    )
    yearFounded: Optional[float] = Field(
        None, description='The year the company was founded.'
    )
    yearFoundedDate: Optional[str] = Field(
        None, description='The date the company was founded.'
    )
    yearFoundedPlace: Optional[str] = Field(
        None, description='The place the company was founded.'
    )


class CumulativeLayoutShift(BaseModel):
    count: Optional[float] = None
    score: Optional[float] = None


class LargestContentfulPaint(BaseModel):
    ms: Optional[float] = None
    score: Optional[float] = None


class TimeToInteractive(BaseModel):
    ms: Optional[float] = None
    score: Optional[float] = None


class TotalBlockingTime(BaseModel):
    ms: Optional[float] = None
    score: Optional[float] = None


class Lighthouse(BaseModel):
    accessibility: Optional[float] = Field(
        None, description='The accessibility score (0-100).'
    )
    bestPractices: Optional[float] = Field(
        None, description='The best practices score (0-100).'
    )
    performance: Optional[float] = Field(
        None, description='The performance score (0-100).'
    )
    seo: Optional[float] = Field(None, description='The SEO score (0-100).')
    maxServerLatency: Optional[float] = Field(
        None, description='The maximum server latency.'
    )
    numFonts: Optional[float] = Field(None, description='The number of fonts.')
    numRequests: Optional[float] = Field(None, description='The number of requests.')
    numScripts: Optional[float] = Field(None, description='The number of scripts.')
    numStylesheets: Optional[float] = Field(
        None, description='The number of stylesheets.'
    )
    numTasks: Optional[float] = Field(None, description='The number of tasks.')
    cumulativeLayoutShift: Optional[CumulativeLayoutShift] = Field(
        None, description='The cumulative layout shift.'
    )
    largestContentfulPaint: Optional[LargestContentfulPaint] = Field(
        None, description='The largest contentful paint.'
    )
    timeToInteractive: Optional[TimeToInteractive] = Field(
        None, description='The time to interactive.'
    )
    totalBlockingTime: Optional[TotalBlockingTime] = Field(
        None, description='The total blocking time.'
    )


class MonthlyVisitors(Enum):
    under_10k = 'under-10k'
    field_10k_50k = '10k-50k'
    field_50k_100k = '50k-100k'
    field_100k_500k = '100k-500k'
    field_500k_1m = '500k-1m'
    field_1m_10m = '1m-10m'
    field_10m_50m = '10m-50m'
    field_50m_100m = '50m-100m'
    field_100m_500m = '100m-500m'
    field_500m_1b = '500m-1b'
    over_1b = 'over-1b'


class Analytics(BaseModel):
    lighthouse: Optional[Lighthouse] = Field(
        None, description='Lighthouse and Core Web Vitals analysis.'
    )
    monthlyVisitors: Optional[MonthlyVisitors] = Field(
        None, description='The total number of monthly visitors the company has.'
    )


class Type3(Enum):
    app = 'app'
    developer = 'developer'
    extension = 'extension'


class AmazonItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class AndroidItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class ChromeItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class Io(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class MacItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class MetaItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class MicrosoftItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class PlaystationItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class XboxItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the app.')
    name: Optional[str] = Field(None, description='The name of the app.')
    rating: Optional[float] = Field(None, description='The rating of the app.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the app has.'
    )
    type: Optional[Type3] = Field(None, description='The type of app the company owns.')
    url: Optional[str] = Field(None, description='The URL to the app.')


class Apps(BaseModel):
    amazon: Optional[List[AmazonItem]] = None
    android: Optional[List[AndroidItem]] = None
    chrome: Optional[List[ChromeItem]] = None
    ios: Optional[List[Io]] = None
    mac: Optional[List[MacItem]] = None
    meta: Optional[List[MetaItem]] = None
    microsoft: Optional[List[MicrosoftItem]] = None
    playstation: Optional[List[PlaystationItem]] = None
    xbox: Optional[List[XboxItem]] = None


class Cover(BaseModel):
    height: Optional[float] = Field(None, description='The height of the image.')
    src: Optional[str] = Field(None, description='The source of the image.')
    width: Optional[float] = Field(None, description='The width of the image.')


class LogoSquare(BaseModel):
    height: Optional[float] = Field(None, description='The height of the image.')
    src: Optional[str] = Field(None, description='The source of the image.')
    width: Optional[float] = Field(None, description='The width of the image.')


class Assets(BaseModel):
    colorPrimary: Optional[str] = Field(
        None, description='The primary color of the company.'
    )
    cover: Optional[Cover] = Field(None, description='The cover image of the company.')
    logoSquare: Optional[LogoSquare] = Field(
        None, description='The square logo of the company.'
    )


class Codes(BaseModel):
    naics: Optional[List[str]] = Field(
        None, description='The NAICS codes of the company.'
    )
    sic: Optional[List[str]] = Field(None, description='The SIC codes of the company.')


class Acquisition(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the acquisition.'
    )
    domain: Optional[str] = Field(None, description='The domain of the acquisition.')
    name: Optional[str] = Field(None, description='The name of the acquisition.')


class Parent(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the parent company.'
    )
    domain: Optional[str] = Field(None, description='The domain of the parent company.')
    name: Optional[str] = Field(None, description='The name of the parent company.')


class Subsidiary(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the subsidiary.'
    )
    domain: Optional[str] = Field(None, description='The domain of the subsidiary.')
    name: Optional[str] = Field(None, description='The name of the subsidiary.')


class Companies(BaseModel):
    acquisitions: Optional[List[Acquisition]] = Field(
        None, description='The acquisitions the company has.'
    )
    parent: Optional[Parent] = Field(
        None, description='The parent company of the company.'
    )
    subsidiaries: Optional[List[Subsidiary]] = Field(
        None, description='The subsidiaries the company has.'
    )


class Category(Enum):
    accounts = 'accounts'
    channels = 'channels'
    general = 'general'
    marketing = 'marketing'
    reservations = 'reservations'
    sales = 'sales'
    technical = 'technical'


class Email(BaseModel):
    category: Optional[Category] = Field(
        None, description='The category of the contact.'
    )
    value: Optional[str] = Field(None, description='The value of the contact.')


class Line(BaseModel):
    category: Optional[Category] = Field(
        None, description='The category of the contact.'
    )
    value: Optional[str] = Field(None, description='The value of the contact.')


class Phone(BaseModel):
    category: Optional[Category] = Field(
        None, description='The category of the contact.'
    )
    value: Optional[str] = Field(None, description='The value of the contact.')


class Whatsapp(BaseModel):
    category: Optional[Category] = Field(
        None, description='The category of the contact.'
    )
    value: Optional[str] = Field(None, description='The value of the contact.')


class Contacts(BaseModel):
    emails: Optional[List[Email]] = Field(
        None, description='The emails the company has.'
    )
    lines: Optional[List[Line]] = Field(None, description='The lines the company has.')
    phones: Optional[List[Phone]] = Field(
        None, description='The phones the company has.'
    )
    whatsapps: Optional[List[Whatsapp]] = Field(
        None, description='The WhatsApp contacts the company has.'
    )


class AppleItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the podcast.')
    name: Optional[str] = Field(None, description='The name of the podcast.')
    rating: Optional[float] = Field(None, description='The rating of the podcast.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the podcast has.'
    )
    url: Optional[str] = Field(None, description='The URL to the podcast.')


class SpotifyItem(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the podcast.')
    name: Optional[str] = Field(None, description='The name of the podcast.')
    rating: Optional[float] = Field(None, description='The rating of the podcast.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the podcast has.'
    )
    url: Optional[str] = Field(None, description='The URL to the podcast.')


class Podcasts(BaseModel):
    apple: Optional[List[AppleItem]] = Field(
        None, description='The Apple podcasts the company has.'
    )
    spotify: Optional[List[SpotifyItem]] = Field(
        None, description='The Spotify podcasts the company has.'
    )


class Contents(BaseModel):
    podcasts: Optional[Podcasts] = Field(
        None, description='The podcasts the company has.'
    )


class Descriptions(BaseModel):
    knowledgeGraph: Optional[str] = Field(
        None, description='The knowledge graph of the company.'
    )
    linkedin: Optional[str] = Field(
        None, description='The LinkedIn description of the company.'
    )
    primary: Optional[str] = Field(
        None, description='The primary description of the company.'
    )
    tagline: Optional[str] = Field(None, description='The tagline of the company.')
    website: Optional[str] = Field(
        None, description='The website description of the company.'
    )
    wikipedia: Optional[str] = Field(
        None, description='The Wikipedia description of the company.'
    )


class State(Enum):
    broken = 'broken'
    for_sale = 'for-sale'
    operating = 'operating'
    redirected = 'redirected'


class Domain(BaseModel):
    alias: Optional[str] = Field(
        None, description='The alias used by the origin domain.'
    )
    createdAt: Optional[str] = Field(
        None, description='The date the domain was created.'
    )
    domain: constr(
        pattern=r'(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]'
    )
    domainAlts: Optional[List[str]] = Field(
        None, description='The alternative domains of the company.'
    )
    domainName: Optional[str] = Field(None, description='The name of the domain.')
    expiredAt: Optional[str] = Field(None, description='The date the domain expired.')
    nsfw: Optional[bool] = Field(None, description='The NSFW state of the domain.')
    redirection: Optional[str] = Field(
        None, description='The redirection of the domain.'
    )
    registrantCountry: Optional[str] = Field(
        None, description='The country of the registrant.'
    )
    registrantPhone: Optional[str] = Field(
        None, description='The phone of the registrant.'
    )
    registrar: Optional[str] = Field(None, description='The registrar of the domain.')
    root: Optional[str] = Field(None, description='The root domain of the company.')
    state: Optional[State] = Field(None, description='The state of the domain.')
    status: Optional[float] = Field(None, description='The status of the domain.')
    tld: Optional[Any] = Field(None, description='The TLD of the domain.')
    updatedAt: Optional[str] = Field(
        None, description='The date the domain was updated.'
    )


class Revenue(Enum):
    under_1m = 'under-1m'
    field_1m_10m = '1m-10m'
    field_10m_50m = '10m-50m'
    field_50m_100m = '50m-100m'
    field_100m_200m = '100m-200m'
    field_200m_1b = '200m-1b'
    over_1b = 'over-1b'


class Finances(BaseModel):
    revenue: Optional[Revenue] = Field(
        None, description='The total revenue the company has.'
    )
    stockExchange: Optional[str] = Field(
        None, description='The stock exchange the company has.'
    )
    stockSymbol: Optional[str] = Field(
        None, description='The stock symbol the company has.'
    )


class Geopoint(BaseModel):
    lat: float = Field(..., description='The latitude of the geopoint.')
    lon: float = Field(..., description='The longitude of the geopoint.')


class Address(BaseModel):
    geopoint: Optional[Geopoint] = Field(
        None, description='The geopoint of the address.'
    )
    raw: Optional[str] = Field(None, description='The raw complete address.')


class City(BaseModel):
    code: Optional[str] = Field(None, description='The code of the city.')
    geopoint: Optional[Geopoint] = Field(None, description='The geopoint of the city.')
    name: Optional[str] = Field(None, description='The name of the city.')
    postcode: Optional[str] = Field(None, description='The postcode of the city.')


class Continent(BaseModel):
    code: Optional[str] = Field(None, description='The code of the continent.')
    geopoint: Optional[Geopoint] = Field(
        None, description='The geopoint of the continent.'
    )
    name: Optional[str] = Field(None, description='The name of the continent.')


class Country(BaseModel):
    code: Optional[str] = Field(None, description='The code of the country.')
    geopoint: Optional[Geopoint] = Field(
        None, description='The geopoint of the country.'
    )
    name: Optional[str] = Field(None, description='The name of the country.')


class County(BaseModel):
    code: Optional[str] = Field(None, description='The code of the county.')
    geopoint: Optional[Geopoint] = Field(
        None, description='The geopoint of the county.'
    )
    name: Optional[str] = Field(None, description='The name of the county.')


class State1(BaseModel):
    code: Optional[str] = Field(None, description='The code of the state.')
    geopoint: Optional[Geopoint] = Field(None, description='The geopoint of the state.')
    name: Optional[str] = Field(None, description='The name of the state.')


class Headquarters(BaseModel):
    address: Optional[Address] = Field(None, description='The address of the location.')
    city: Optional[City] = Field(None, description='The city of the location.')
    continent: Optional[Continent] = Field(
        None, description='The continent of the location.'
    )
    country: Optional[Country] = Field(None, description='The country of the location.')
    county: Optional[County] = Field(None, description='The county of the location.')
    state: Optional[State1] = Field(None, description='The state of the location.')


class Locations(BaseModel):
    headquarters: Optional[Headquarters] = Field(
        None, description='The headquarters of the company.'
    )


class SimilarAttribute(BaseModel):
    attribute: str = Field(
        ..., description='The similar attribute name between the companies.'
    )
    value: str = Field(
        ..., description='The similar attribute value between the companies.'
    )


class Meta(BaseModel):
    ideated: Optional[bool] = Field(None, description='If the company was ideated.')
    listIds: Optional[List[float]] = Field(
        None, description='The list ids the company is in.'
    )
    mysqlId: Optional[float] = Field(None, description='The MySQL ID of the company.')
    score: Optional[float] = Field(
        None,
        description='The data score of the company, generated from the total amount of data available.',
    )
    sources: Optional[float] = Field(
        None, description='If the company has sources, if so how many sources.'
    )
    syncedAt: Optional[str] = Field(
        None, description='The date the data was last synced.'
    )
    cost: Optional[float] = Field(
        None, description='The cost of the company (not persisted).'
    )
    credits: Optional[float] = Field(
        None,
        description='The remaining credits of the team after requesting the company (not persisted).',
    )
    freeRequest: Optional[bool] = Field(
        None, description='If the company was requested for free (not persisted).'
    )
    new: Optional[bool] = Field(
        None, description='If the company is new (not persisted).'
    )
    similarAttributes: Optional[List[SimilarAttribute]] = Field(
        None,
        description='The similar attributes between the companies (not persisted).',
    )
    similarity: Optional[float] = Field(
        None,
        description='The similarity score between the company and the current query (not persisted).',
    )


class EmailPattern(BaseModel):
    emailsCount: Optional[float] = Field(
        None, description='The number of emails the pattern has.'
    )
    pattern: Optional[str] = Field(None, description='The pattern of the email.')
    usagePercentage: Optional[float] = Field(
        None, description='The usage percentage of the pattern.'
    )


class Secondaries(BaseModel):
    emailPatterns: Optional[List[EmailPattern]] = Field(
        None, description='The email patterns the company has.'
    )


class Discord(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Dribbble(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Facebook(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class FacebookGroup(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Github(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Instagram(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Linkedin(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Mastodon(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Medium(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Patreon(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Pinterest(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Reddit(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Slack(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Snapchat(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Stackoverflow(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Steam(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Substack(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Threads(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Tiktok(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Tumblr(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Twitch(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Twitter(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Vimeo(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Vkontakte(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Wellfound(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Xing(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Yelp(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Youtube(BaseModel):
    followers: Optional[float] = Field(
        None, description='The number of followers the company has.'
    )
    following: Optional[float] = Field(
        None, description='The number of following the company has.'
    )
    id: Optional[str] = Field(None, description='The ID of the company.')
    idNumeric: Optional[str] = Field(None, description='The numeric ID of the company.')
    likes: Optional[float] = Field(
        None, description='The number of likes the company has.'
    )
    members: Optional[float] = Field(
        None, description='The number of members the company has.'
    )
    monthlyViews: Optional[float] = Field(
        None, description='The number of monthly views the company has.'
    )
    posts: Optional[float] = Field(
        None, description='The number of posts the company has.'
    )
    rating: Optional[float] = Field(None, description='The rating of the company.')
    reviews: Optional[float] = Field(
        None, description='The number of reviews the company has.'
    )
    talkingAbout: Optional[float] = Field(
        None, description='The number of people talking about the company.'
    )
    url: str = Field(
        ..., description='The URL to the social media page of the company.'
    )
    videos: Optional[float] = Field(
        None, description='The number of videos the company has.'
    )
    wereHere: Optional[float] = Field(
        None, description='The number of people who were here.'
    )


class Socials(BaseModel):
    discord: Optional[Discord] = None
    dribbble: Optional[Dribbble] = None
    facebook: Optional[Facebook] = None
    facebookGroup: Optional[FacebookGroup] = None
    github: Optional[Github] = None
    instagram: Optional[Instagram] = None
    linkedin: Optional[Linkedin] = None
    mastodon: Optional[Mastodon] = None
    medium: Optional[Medium] = None
    patreon: Optional[Patreon] = None
    pinterest: Optional[Pinterest] = None
    reddit: Optional[Reddit] = None
    slack: Optional[Slack] = None
    snapchat: Optional[Snapchat] = None
    stackoverflow: Optional[Stackoverflow] = None
    steam: Optional[Steam] = None
    substack: Optional[Substack] = None
    threads: Optional[Threads] = None
    tiktok: Optional[Tiktok] = None
    tumblr: Optional[Tumblr] = None
    twitch: Optional[Twitch] = None
    twitter: Optional[Twitter] = None
    vimeo: Optional[Vimeo] = None
    vkontakte: Optional[Vkontakte] = None
    wellfound: Optional[Wellfound] = None
    xing: Optional[Xing] = None
    yelp: Optional[Yelp] = None
    youtube: Optional[Youtube] = None


class DetectionType(Enum):
    cookies = 'cookies'
    dns = 'dns'
    evaluate = 'evaluate'
    evaluate_bundle = 'evaluate-bundle'
    evaluate_version = 'evaluate-version'
    headers = 'headers'
    metas = 'metas'
    scripts = 'scripts'
    tags = 'tags'
    urls = 'urls'
    variables = 'variables'


class Detail(BaseModel):
    categories: Optional[List[str]] = Field(
        None, description='The categories of the technology.'
    )
    detectedAt: str = Field(..., description='The date the technology was detected.')
    detectionTypes: List[DetectionType] = Field(
        ..., description='The detection types the technology has.'
    )
    slug: str = Field(..., description='The slug of the technology.')
    version: Optional[str] = Field(None, description='The version of the technology.')


class Technologies(BaseModel):
    active: List[str] = Field(..., description='The active company technologies.')
    categories: List[str] = Field(
        ..., description='The categories the company technologies are in.'
    )
    details: List[Detail] = Field(
        ..., description='The details of the company technologies.'
    )


class Urls(BaseModel):
    about: Optional[str] = Field(
        None, description='The URL to the about page of the company.'
    )
    blog: Optional[str] = Field(None, description='The URL to the blog of the company.')
    careers: Optional[str] = Field(
        None, description='The URL to the careers page of the company.'
    )
    contact: Optional[str] = Field(
        None, description='The URL to the contact page of the company.'
    )
    crunchbase: Optional[str] = Field(
        None, description='The URL to the Crunchbase page of the company.'
    )
    developers: Optional[str] = Field(
        None, description='The URL to the developers page of the company.'
    )
    docs: Optional[str] = Field(None, description='The URL to the docs of the company.')
    events: Optional[str] = Field(
        None, description='The URL to the events of the company.'
    )
    glassdoor: Optional[str] = Field(
        None, description='The URL to the Glassdoor page of the company.'
    )
    partnership: Optional[str] = Field(
        None, description='The URL to the partnership page of the company.'
    )
    pricing: Optional[str] = Field(
        None, description='The URL to the pricing page of the company.'
    )
    privacy: Optional[str] = Field(
        None, description='The URL to the privacy policy of the company.'
    )
    registrar: Optional[str] = Field(
        None, description='The URL to the registrar of the domain.'
    )
    salesNavigator: Optional[str] = Field(
        None, description='The URL to the Sales Navigator page of the company.'
    )
    sitemap: Optional[str] = Field(
        None, description='The URL to the sitemap of the company.'
    )
    status: Optional[str] = Field(
        None, description='The URL to the status page of the company.'
    )
    terms: Optional[str] = Field(
        None, description='The URL to the terms of service of the company.'
    )
    updates: Optional[str] = Field(
        None, description='The URL to the updates of the company.'
    )
    website: Optional[str] = Field(
        None, description='The URL to the website of the company.'
    )
    wellfound: Optional[str] = Field(
        None, description='The URL to the Wellfound page of the company.'
    )
    wikidata: Optional[str] = Field(
        None, description='The URL to the Wikidata page of the company.'
    )
    wikipedia: Optional[str] = Field(
        None, description='The URL to the Wikipedia page of the company.'
    )


class Vectors(BaseModel):
    global_: Optional[List[float]] = Field(
        None, alias='global', description='The global computed vector.'
    )


class Answer(BaseModel):
    explanation: Optional[str] = Field(
        None, description='The explanation of the answer.'
    )
    output: Optional[Dict[str, Any]] = Field(
        None, description='The output of the answer.'
    )
    score: Optional[float] = Field(None, description='The score of the answer.')


class Action1(BaseModel):
    answer: Optional[Answer] = Field(None, description='The answer of the action.')


class CompanyV2(BaseModel):
    id: Optional[str] = None
    about: Optional[About] = None
    analytics: Optional[Analytics] = None
    apps: Optional[Apps] = Field(None, description='The apps the company owns.')
    assets: Optional[Assets] = None
    codes: Optional[Codes] = None
    companies: Optional[Companies] = None
    contacts: Optional[Contacts] = None
    contents: Optional[Contents] = None
    descriptions: Optional[Descriptions] = None
    domain: Optional[Domain] = None
    finances: Optional[Finances] = None
    locations: Optional[Locations] = None
    meta: Optional[Meta] = None
    people: Optional[Dict[str, Any]] = None
    secondaries: Optional[Secondaries] = None
    socials: Optional[Socials] = Field(
        None, description='The social media pages of the company.'
    )
    technologies: Optional[Technologies] = None
    urls: Optional[Urls] = None
    vectors: Optional[Vectors] = None
    action: Optional[Action1] = Field(
        None, description='The action results for the company.'
    )


class EmailPattern1(BaseModel):
    emailsCount: Optional[float] = None
    id: float
    pattern: str
    usagePercentage: Optional[float] = None


class Context(Enum):
    analytics = 'analytics'
    api = 'api'
    companies = 'companies'
    company = 'company'
    documentation = 'documentation'
    enrichment = 'enrichment'
    landing = 'landing'
    list = 'list'
    similarity = 'similarity'


class Type12(Enum):
    array_boolean = 'array|boolean'
    array_number = 'array|number'
    array_string = 'array|string'
    boolean = 'boolean'
    number = 'number'
    string = 'string'


class Field2(BaseModel):
    description: Optional[str] = None
    key: str
    type: Type12
    values: Optional[List[str]] = None


class Model1(Enum):
    small = 'small'
    large = 'large'


class Data1(BaseModel):
    all: Optional[bool] = None
    count: Optional[float] = None
    domains: Optional[List[str]] = None
    explain: Optional[bool] = None
    fields: Optional[List[Field2]] = None
    model: Optional[Model1] = None
    names: Optional[List[str]] = None
    query: Optional[List[SegmentationCondition]] = None
    question: Optional[str] = None
    segmentation: Optional[bool] = None


class Feature(Enum):
    ask = 'ask'
    cleanup = 'cleanup'
    enrich = 'enrich'
    product = 'product'
    search = 'search'
    similar = 'similar'


class Field3(BaseModel):
    description: Optional[str] = None
    key: str
    type: Type12
    values: Optional[List[str]] = None


class Job1(Enum):
    ask_list = 'ask-list'


class Data2(BaseModel):
    answer: LLMAnswer
    domains: Optional[List[str]] = None
    fields: List[Field3]
    job: Job1
    query: Optional[List[SegmentationCondition]] = None
    question: str


class Status1(Enum):
    pending = 'pending'


class Type14(Enum):
    jobs_request = 'jobs:request'


class Action2(BaseModel):
    cost: Optional[float] = None
    data: Optional[Data2] = None
    listId: Optional[float] = None
    promptId: float
    status: Status1
    type: Type14


class Answer1(BaseModel):
    explanation: Optional[str] = None
    output: Dict[str, Any]
    score: float


class Response(BaseModel):
    all: Optional[bool] = None
    cost: Optional[float] = None
    count: Optional[float] = None
    domain: Optional[str] = None
    error: Optional[str] = None
    action: Optional[Action2] = None
    answer: Optional[Answer1] = None


class Cost(Enum):
    number_0 = 0


class Job2(Enum):
    cleanup_list = 'cleanup-list'


class Data3(BaseModel):
    domains: Optional[List[str]] = None
    job: Job2
    query: Optional[List[SegmentationCondition]] = None


class Action3(BaseModel):
    cost: Optional[Cost] = None
    data: Optional[Data3] = None
    listId: Optional[float] = None
    promptId: float
    status: Status1
    type: Type14


class Response1(BaseModel):
    all: Optional[bool] = None
    cost: Optional[float] = None
    count: Optional[float] = None
    domain: Optional[str] = None
    error: Optional[str] = None
    action: Optional[Action3] = None


class Job3(Enum):
    enrich_companies = 'enrich-companies'
    enrich_list = 'enrich-list'


class Data4(BaseModel):
    domains: Optional[List[str]] = None
    job: Job3
    query: Optional[List[SegmentationCondition]] = None


class Action4(BaseModel):
    cost: Optional[float] = None
    data: Data4
    listId: Optional[float] = None
    promptId: float
    status: Status1
    type: Type14


class Response2(BaseModel):
    all: Optional[bool] = None
    cost: Optional[float] = None
    count: Optional[float] = None
    domain: Optional[str] = None
    error: Optional[str] = None
    action: Optional[Action4] = None


class Response3(BaseModel):
    all: Optional[bool] = None
    cost: Optional[float] = None
    count: Optional[float] = None
    domain: Optional[str] = None
    error: Optional[str] = None
    domains: Optional[List[str]] = None
    listId: Optional[float] = None
    query: Optional[List[SegmentationCondition]] = None


class Response4(BaseModel):
    all: Optional[bool] = None
    cost: Optional[float] = None
    count: Optional[float] = None
    domain: Optional[str] = None
    error: Optional[str] = None
    domains: Optional[List[str]] = None


class Prompt(BaseModel):
    companyId: Optional[float] = None
    context: Context
    createdAt: Optional[str] = None
    data: Optional[Data1] = None
    feature: Optional[Feature] = None
    hits: Optional[float] = None
    id: float
    model: Optional[Model1] = None
    prompt: str
    promptKey: str
    response: Optional[Union[Response, Response1, Response2, Response3, Response4]] = (
        None
    )
    updatedAt: Optional[str] = None


class PageContentsIdeated(BaseModel):
    domain: Optional[str] = None
    about: Optional[List[str]] = None
    acquired: Optional[List[str]] = None
    contacts: Optional[List[str]] = None
    customers: Optional[List[str]] = None
    features: Optional[List[str]] = None
    finances: Optional[List[str]] = None
    industries: Optional[List[str]] = None
    jobs: Optional[List[str]] = None
    locations: Optional[List[str]] = None
    others: Optional[List[str]] = None
    pricing: Optional[List[str]] = None
    related: Optional[List[str]] = None
    resources: Optional[List[str]] = None
    security: Optional[List[str]] = None
    social: Optional[List[str]] = None
    solutions: Optional[List[str]] = None
    support: Optional[List[str]] = None
    team: Optional[List[str]] = None
    technologies: Optional[List[str]] = None
    updates: Optional[List[str]] = None
    broken: Optional[bool] = None
    closed: Optional[bool] = None
    forSale: Optional[bool] = None
    nsfw: Optional[bool] = None
    updatedAt: Optional[str] = None
    sources: Optional[List[str]] = None
    tokens: Optional[float] = None


class PageContentsLink(BaseModel):
    text: Optional[str] = None
    url: str


class PageContentsPage(BaseModel):
    url: str
    content: Optional[str] = None
    html: Optional[str] = None
    description: Optional[str] = None
    title: Optional[str] = None
    externals: Optional[List[PageContentsLink]] = None
    navigation: Optional[List[PageContentsLink]] = None
    visitedAt: Optional[str] = None


class Technology(BaseModel):
    categories: Optional[List[str]] = None
    companiesCount: Optional[float] = None
    createdAt: Optional[str] = None
    editor: str
    free: Optional[bool] = None
    id: float
    name: str
    nameSynonyms: Optional[List[str]]
    paid: Optional[bool] = None
    slug: str
    updatedAt: Optional[str] = None
    usageCount: Optional[float] = None
    websiteUrl: Optional[str] = None


class NominatimCity(BaseModel):
    code: str
    companiesCount: Optional[float] = None
    id: float
    latitude: Optional[str] = None
    linkedinHeadline: Optional[str] = None
    linkedinId: Optional[str] = None
    linkedinQuery: Optional[str] = None
    longitude: Optional[str] = None
    name: str
    nominatimCountryId: Optional[float] = None
    nominatimCountyId: Optional[float] = None
    nominatimStateId: Optional[float] = None
    postcode: Optional[str] = None
    usageCount: Optional[float] = None


class NominatimCounty(BaseModel):
    citiesCount: Optional[float] = None
    code: str
    companiesCount: Optional[float] = None
    id: float
    latitude: Optional[str] = None
    linkedinHeadline: Optional[str] = None
    linkedinId: Optional[str] = None
    linkedinQuery: Optional[str] = None
    longitude: Optional[str] = None
    name: str
    nominatimCountryId: Optional[float] = None
    nominatimStateId: Optional[float] = None
    usageCount: Optional[float] = None


class Continent1(Enum):
    Africa = 'Africa'
    Antarctica = 'Antarctica'
    Asia = 'Asia'
    Europe = 'Europe'
    North_America = 'North America'
    Oceania = 'Oceania'
    South_America = 'South America'


class ContinentCode(Enum):
    af = 'af'
    an = 'an'
    as_ = 'as'
    eu = 'eu'
    na = 'na'
    oc = 'oc'
    sa = 'sa'


class NominatimCountry(BaseModel):
    citiesCount: Optional[float] = None
    code: str
    companiesCount: Optional[float] = None
    continent: Optional[Continent1]
    continentCode: Optional[ContinentCode]
    countiesCount: Optional[float] = None
    id: float
    latitude: Optional[str] = None
    linkedinHeadline: Optional[str] = None
    linkedinId: Optional[str] = None
    longitude: Optional[str] = None
    name: str
    nameEs: str
    nameFr: str
    nameNative: str
    population: Optional[float] = None
    statesCount: Optional[float] = None
    usageCount: Optional[float] = None


class NominatimState(BaseModel):
    citiesCount: Optional[float] = None
    code: str
    companiesCount: Optional[float] = None
    countiesCount: Optional[float] = None
    id: float
    latitude: Optional[str] = None
    linkedinHeadline: Optional[str] = None
    linkedinId: Optional[str] = None
    linkedinQuery: Optional[str] = None
    longitude: Optional[str] = None
    name: str
    nominatimCountryId: Optional[float] = None
    usageCount: Optional[float] = None


class Code(Enum):
    af = 'af'
    an = 'an'
    as_ = 'as'
    eu = 'eu'
    na = 'na'
    oc = 'oc'
    sa = 'sa'


class NominatimContinent(BaseModel):
    citiesCount: Optional[float] = None
    code: Code
    companiesCount: Optional[float] = None
    countiesCount: Optional[float] = None
    countriesCount: Optional[float] = None
    icon: Optional[str] = None
    id: float
    latitude: Optional[str] = None
    linkedinHeadline: Optional[str] = None
    linkedinId: Optional[str] = None
    longitude: Optional[str] = None
    name: str
    nameEs: str
    nameFr: str
    statesCount: Optional[float] = None
    usageCount: Optional[float] = None


class JobTitle(BaseModel):
    department: Optional[str] = None
    departmentSecondary: Optional[str] = None
    id: Optional[float] = None
    linkedinCount: Optional[float] = None
    name: str
    nameEs: Optional[str] = None
    nameFr: Optional[str] = None
    seniorityLevel: Optional[str] = None
    seniorityLevelSecondary: Optional[str] = None
    usageCount: Optional[float] = None


class ListAnalytics(BaseModel):
    companiesCount: Optional[float] = None
    id: Optional[float] = None
    listId: Optional[float] = None


class ListModel(BaseModel):
    analytics: Optional[ListAnalytics] = None
    companyListId: Optional[float] = None
    createdAt: Optional[str] = None
    dynamic: Optional[bool] = None
    exporting: bool
    exportingAt: Optional[str] = None
    id: float
    imported: bool
    mailFrequencies: Optional[Dict[str, Any]] = None
    maxCompanies: Optional[float] = None
    name: str
    processActive: bool
    processDisabled: Optional[bool] = None
    processingAt: Optional[str] = None
    processInitialized: bool
    processMessage: Optional[str] = None
    query: Optional[List[SegmentationCondition]] = None
    querySimilar: List[str]
    teamId: Optional[str] = None
    unseenActions: Optional[List[Action]] = None
    userId: Optional[float] = None
    vectors: Optional[List[List[float]]] = None
